#!/usr/bin/env bash
# @import lang/required
# @import console/info
# @import console/error
# @import lang/truth
# @import github.com/escapace/stack-tools docker/dockerBuild

rpmbuild () {
    local name="$1"
    local configuration="${2:-epel-8-x86_64}"
    local scope="${DOCKER_SCOPE:-internal}"
    local main="${scope}/rpmbuild"
    local data="${scope}-rpmbuild-cache"

    if required "${RPMBUILD_PACKAGE}"
    then
        name="${RPMBUILD_PACKAGE}"
    fi

    required "$name" || {
        error 'Nothing to do'

        return 1
    }

    local SOURCES="${MANAGE_REPOSITORY}/SOURCES"
    local SPECS="${MANAGE_REPOSITORY}/SPECS"
    local SRPMS="${MANAGE_REPOSITORY}/SRPMS"
    local RPMS="${MANAGE_REPOSITORY}/RPMS"

    if truth "$DOCKER"
    then
        [[ -d "/tmp/repository/SOURCES/${name}" ]] || {
            error "Cannot access ${name}: No such file or directory"

            return 1
        }

        [[ -f "/tmp/repository/SPECS/${name}.spec" ]] || {
            error "Cannot access ${name}: No such file or directory"

            return 1
        }

        rm -rf "${MANAGE_REPOSITORY}"/{BUILD,RPMS,SPECS,SRPMS,SOURCES}
        mkdir -p "${MANAGE_REPOSITORY}"/{BUILD,RPMS,SPECS,SRPMS}
        cp -rf "/tmp/repository/SOURCES/${name}" "${SOURCES}"
        cp -rf "/tmp/repository/SPECS/${name}.spec" "${SPECS}/${name}.spec"

        _ info "MOCK init"
        mock -r "${configuration}" --dnf --init
        
        _ info "MOCK dependencies"

        if [[ "${name}" == "knot-resolver" ]]
        then
            mock -r "${configuration}" --install "/tmp/repository/RPMS/libuv-1.34.1-1.el8.x86_64.rpm"
            mock -r "${configuration}" --install "/tmp/repository/RPMS/libuv-devel-1.34.1-1.el8.x86_64.rpm"
        fi

        if [[ "${name}" == "lua-psl" ]]
        then
            mock -r "${configuration}" --install "/tmp/repository/RPMS/libpsl-0.21.0-2.el8.x86_64.rpm"
            mock -r "${configuration}" --install "/tmp/repository/RPMS/libpsl-devel-0.21.0-2.el8.x86_64.rpm"
        fi

        _ info "MOCK SRPM"

        mock -r "${configuration}" \
            --no-clean \
            --buildsrpm \
            --spec="${SPECS}/${name}.spec" \
            --sources="${SOURCES}" \
            --resultdir="${SRPMS}" \
            --no-cleanup-after
            
        _ info "MOCK RPM"

        mock -r "${configuration}" \
            --no-clean \
            --no-cleanup-after \
            --rebuild "$(find "${SRPMS}" -type f -name "*.src.rpm")" \
            --resultdir="${RPMS}"

        sudo find "${RPMS}" -type f -name "*.rpm" -not -name '*.src.rpm' -exec chown "${HOST_UID}:${HOST_GID}" {} \;
        sudo find "${RPMS}" -type f -name "*.rpm" -not -name '*.src.rpm' -exec cp -f {} /tmp/repository/RPMS \;

        sudo find "${SRPMS}" -type f -name "*.src.rpm" -exec chown "${HOST_UID}:${HOST_GID}" {} \;
        sudo find "${SRPMS}" -type f -name "*.src.rpm" -exec cp -f {} /tmp/repository/SRPMS \;
    else
        [ -f "${SPECS}/${name}.spec" ] || {
            error "spec ${name} does not exist"

            return 1
        }

        DOCKER_BUILD_OPTIONS="--rm" dockerBuild rpmbuild

        info "Processing \"${name}\" ..."

        if ! docker inspect "${data}" > /dev/null 2>&1; then
            docker create -v /home/centos/cache \
                --name "${data}" \
                --entrypoint "/bin/true" \
                "${main}"
        fi

        docker run -it --privileged \
            --volumes-from "${data}" \
            -v "${MANAGE_REPOSITORY}":/tmp/repository \
            -e HOST_UID="$(id -u)" \
            -e HOST_GID="$(id -g)" \
            "${main}" build "${name}"
    fi
}
